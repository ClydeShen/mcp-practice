---
description: 
globs: 
alwaysApply: false
---
# Phase 1 - Setup Claude 3 Sonnet Access & Basic Orchestration

## 1. Phase Objective & Business Context (One NZ Agentic Voice PoC)

**Overall Goal for this Phase:** To establish the foundational AI reasoning capability of the Proof of Concept (PoC). This involves verifying access to and enabling interaction with the advanced Large Language Model (LLM), Claude 3 Sonnet. The primary business driver is to demonstrate the system's core intelligence in understanding and processing complex queries textually. **This phase lays the groundwork for the `TestOrchestratorLambda` to manage more sophisticated interactions, including the Model Context Protocol (MCP) driven by Claude in later phases.**

**Key Business Value Proposition for this Phase:**
*   Demonstrate technical feasibility of using a state-of-the-art LLM (Claude 3 Sonnet) for advanced reasoning.
*   Lay the groundwork for more complex functionalities like dynamic data fetching and eventually, voice interaction.
*   Provide an initial, tangible backend component that can process textual user intents.

## 2. Functional Requirements for Phase 1

*(Reference: `instruction/business-requirement.md`)*

*   **POC_FUNC_002_Delegate_To_Claude (Text-based foundation)**:
    *   **Description**: When a text-based request is received by the Orchestration Layer, requiring complex reasoning or task planning, the system MUST delegate this to Claude 3 Sonnet. **In this phase, this involves a direct invocation and response, setting the stage for future multi-step, tool-using dialogues.**
    *   **Components_Responsible**: Orchestration Layer (AWS Lambda: `TestOrchestratorLambda`), Claude 3 Sonnet (AWS Bedrock).
    *   **Mechanism**: The `TestOrchestratorLambda` is triggered (e.g., by a test event initially), passing necessary context (e.g., textual query). The `TestOrchestratorLambda` invokes Claude 3 Sonnet.
    *   **Acceptance_Criteria**: Based on the textual input to the `TestOrchestratorLambda`, Claude 3 Sonnet is correctly invoked with relevant input, and its response is processed.

*   **POC_FUNC_004_Claude_Formulates_Text (Core capability)**:
    *   **Description**: Claude 3 Sonnet MUST formulate a coherent and contextually appropriate textual response or piece of information based on its reasoning.
    *   **Component_Responsible**: Claude 3 Sonnet (AWS Bedrock), utilised by `TestOrchestratorLambda`.
    *   **Acceptance_Criteria**: Claude 3 Sonnet generates accurate textual output relevant to the input query, which is then returned or logged by the `TestOrchestratorLambda`.

*   **(Initial) POC_FUNC_006_Context_Awareness_Text**:
    *   **Description**: For this phase, the `TestOrchestratorLambda` should be capable of sending a self-contained textual query to Claude. Full conversational context management will be built upon in later phases.
    *   **Acceptance_Criteria**: The `TestOrchestratorLambda` can successfully pass a text prompt to Claude and receive a response.

## 3. Technical Implementation Tasks & Requirements for Phase 1

*(Reference: `instruction/main.md`, `instruction/technical-requriement.md`)*

### Task 1.1: Verify Claude 3 Sonnet Model Access
*   **Technical_Objective**: Ensure Claude 3 Sonnet model is activated and accessible in the AWS account and specified region.
*   **Actions**:
    1.  Manually check in the AWS Bedrock console that model access for "Claude 3 Sonnet" is granted.
    2.  Note down the exact Model ID for Claude 3 Sonnet (e.g., `anthropic.claude-3-sonnet-YYYYMMDD-vX:X`) and the AWS region.
*   **Testing_Strategy**:
    *   AWS Console Verification.
    *   (Post Task 1.2) SDK/CLI Test using the `TestOrchestratorLambda`'s IAM role.
*   **Works_Properly_Indicator**: Confirmation of access; Model ID documented. SDK/CLI test (later) successfully invokes model.

### Task 1.2: Define IAM & Create `TestOrchestratorLambda` (invokes Claude)
*   **Technical_Objective**: Create an AWS Lambda function (`TestOrchestratorLambda`) with an IAM role granting necessary permissions to invoke Claude 3 Sonnet and write to CloudWatch Logs. **This Lambda will serve as the central orchestrator, initially for direct Claude invocations, and later for managing tool use and MCP interactions.**
*   **Technical Requirements from `main.md`**:
    *   `TR_004_Advanced_Reasoning_LLM` (relevant parts for basic invocation).
    *   `TR_010_Secure_AWS_Service_Access` (IAM role with least privilege).
    *   `TR_011_Efficient_Development_Workflow` (consider IaC if feasible for Lambda creation, e.g. AWS SAM).
*   **Actions**:
    1.  **Define IAM Role & Policy for `TestOrchestratorLambda`**:
        *   **Trust Policy**: Allow `lambda.amazonaws.com` to assume the role.
        *   **Permissions Policy Example**:
            ```json
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "bedrock:InvokeModel",
                        "Resource": "arn:aws:bedrock:<your-region>:<your-account-id>:model/<claude-3-sonnet-model-id>"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:<your-region>:<your-account-id>:log-group:/aws/lambda/<TestOrchestratorLambdaName>:*"
                    }
                ]
            }
            ```
        *   Replace placeholders: `<your-region>`, `<your-account-id>`, `<claude-3-sonnet-model-id>`, `<TestOrchestratorLambdaName>`.
    2.  **Create `TestOrchestratorLambda`**:
        *   Use Node.js (with TypeScript, if preferred, and AWS SDK v3) or Python.
        *   Handler function should:
            *   Accept an event object containing a `prompt` (string).
            *   Initialise the AWS Bedrock Runtime client.
            *   Construct the `InvokeModelCommandInput` for Claude 3 Sonnet (using the obtained Model ID and input prompt). Specify `anthropic_version` (e.g., "bedrock-2023-05-31"). **For Phase 1, this is a direct invocation. In later phases, this Lambda will also handle system prompts for tool use instructions and parse Claude's responses for action requests.**
            *   Send the command and receive the response.
            *   Parse the response from Claude (typically a stream of chunks; process and assemble the text).
            *   Log the input prompt and Claude's response.
            *   Return Claude's textual response.
        *   Deploy the Lambda with the created IAM role.
*   **Testing_Strategy**:
    *   IAM Policy Review (manual, least privilege).
    *   IaC Linting/Validation (if IaC used).
    *   Lambda Unit Test (TDD: mock Bedrock SDK, verify input/output, error handling).
    *   Local Invocation / AWS Console Test Event.
*   **Works_Properly_Indicator**: IAM correct. Unit tests pass. Lambda executes for valid inputs.

### Task 1.3: Test Claude 3 Sonnet Invocation via `TestOrchestratorLambda`
*   **Technical_Objective**: Confirm the deployed `TestOrchestratorLambda` can successfully invoke the actual Claude 3 Sonnet model in Bedrock.
*   **Actions**:
    1.  Invoke the deployed `TestOrchestratorLambda` using the AWS Lambda console's test event feature (or AWS CLI).
    2.  Provide a sample JSON test event, e.g., `{ "prompt": "Kia ora! Can you tell me a short story about a Kiwi bird exploring Aotearoa?" }`.
    3.  Check CloudWatch Logs for the Lambda to verify:
        *   Successful invocation.
        *   The prompt sent to Claude.
        *   The full response received from Claude.
        *   Absence of errors.
*   **Works_Properly_Indicator**: `TestOrchestratorLambda` successfully invokes Claude 3 Sonnet; response is logged/returned.

## 4. Key Deliverables for Phase 1

*   Confirmation of Claude 3 Sonnet model access and its exact Model ID.
*   Documented IAM Role and Policy definitions for `TestOrchestratorLambda`.
*   Source code for `TestOrchestratorLambda` (Node.js or Python).
*   A deployed `TestOrchestratorLambda` function in AWS.
*   Test results (logs) demonstrating successful invocation of Claude 3 Sonnet via the Lambda.
*   (Ongoing) Adherence to Quality Standards QS_002 (Clarity), QS_007 (Security Awareness), QS_008 (Documentation).

## 5. General PoC Considerations for this Phase

*   **Modularity (NFR_ID: POC_NFR_002)**: Design Lambda code to be understandable and maintainable.
*   **Observability (NFR_ID: POC_NFR_003)**: Implement basic but effective logging in the Lambda.
*   **Security (NFR_ID: POC_NFR_001)**: Ensure IAM role for Lambda follows least privilege. No hardcoded secrets.


*   **Documentation (QS_008)**: Document the Model ID, IAM role ARN, Lambda ARN, and any key decisions.